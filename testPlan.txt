Testing: 
ttts.c
ttt.c

Initial Setup: In order to test functionality we played a normal game of tic-tac-toe using the program. 
    - First we started the server on one computer by logging to ilab1@cs.rutgers.edu(or any other rutgers machine) and then compiled the ttts.c program. 
    - After that we ran the command "./ttts [port#]" replacing the port# with a port number that is avalible. 
    - Then the the other person, the one who didn't set up the server connection, logged onto another ilab machine (seperate from the inital one
      connected) and then ran "./ttt [domain name of the host server][port#]"
    - Then the program will have matched us both togehter for a game 

                                                                      Functionality Testing:
    
Case 1) Host wins Test | Vertical Win Test
        We ran the following move order
         - Host: 1,1
         - Second player: 2,2
         - Host: 2,1 
         - Second player: 3,2
         - Host: 3,1 --- Host Wins
           - Host Recieves: 
             - OVER|29|W|[Host] has completed a line.|
           - Second Player Recieves: 
             - OVER|29|L|[Host] has completed a line.|
       
Case 2) Second Player wins | Horizontal Win Test 
        We ran the following move order:
         - Host: 2,2
         - Second player: 3,2
         - Host: 1,3 
         - Second player: 3,3
         - Host: 1,2 
         - Second player: 3,1 - Second Player Wins
           - Second player Recieves: 
             - OVER|38|W|[Second player] has completed a line.|
           - Host Recieves: 
             - OVER|38|L|[Second player] has completed a line.|

Case 3) Diagonal Win Test 
        We ran the following move order:
         - Host: 2,2
         - Second player: 2,3
         - Host: 3,3 
         - Second player: 3,2
         - Host: 1,1 - Host Wins
           - Host Recieves: 
             - OVER|29|W|[Host] has completed a line.|
           - Second Player Recieves: 
             - OVER|29|L|[Host] has completed a line.|

Case 4) Draw Testing | Draw Message Testing 
        A) Accepting the Draw
           We ran the following move order: 
           - Host: 1,1
           - Second Player: Draw |2| S|
           - Host: Draw |2| A|
           - Both players recieve their resepective message: 
              - OVER|21|W|[HOST] has resigned.|
              - OVER|30|W|[Second Player] has resigned.|
           
        B) Declining the Draw
           We ran the following move order: 
           - Host: 1,1
           - Second Player: Draw |2| S
           - Host: Draw |2| R|
           - Second Player: 2,2
           - Host: 1,2
           - Second Player: 3,2
           - Host: 1,3 - Host Wins
             - Host Recieves: 
               - OVER|29|W|[Host] has completed a line.|
             - Second Player Recieves: 
               - OVER|29|L|[Host] has completed a line.|
        
 
Case 5) Resignation Testing | Resignation Message Testing
        We ran the following move order: 
        - Host: RSGN |0|
        - Second Player Wins
          - Second player Recieves: 
            - OVER|38|W|[Second player] has completed a line.|
          - Host Recieves: 
            - OVER|38|L|[Second player] has completed a line.|
            
Case 6) Multiple Games Happening At Once | Multi-threading
        - After we did the inital set up we did the following:  
          - We logged onto another ilab machine (differnt from the inital two we connected two) and then ran the command "./ttt [domain name of the host
            server][port#]"
          - Then we did the same thing again in another ilab machine(different then the three already connected two)
          - The result of this is 2 concurrent games that are being played on the same server, proving the functionality of multithreading in this
            program

Case 7) Disconnected from the Server
        - We wanted to test if the other user gets the relevant message when the other user randomly disconnects from the server.
        - To test this we ran a regular game and had one player turn off the WIFI on thier computer
        - The other player recieved the responce: 
          
                                                                      Error Testing:
Case 1) Invalid Commands
        A) We tested the following misspellings of commands:
           - PLAY -> ply
             - Recieved Responce: 
           - MOVE -> mv
             - Recieved Responce:
           - RSGN -> resign
             - Recieved Responce:
           - DRAW -> drw
             - Recieved Responce:
        
        B) We tested the following incorrect sequence of commands(without any prior messages):
           - Host: Draw |2| A|
             - Recieved Response: 
           -  Host: Draw |2| R|
              - Recieved Response: 
        
        C) We tested the following incorrect formatting: 
         - Host: MOVE|5|X|1,1|
           - Recieved Responce: 
         - Host: DRAW|1|S|
           - Recieved Responce: 
         - Host: RSGN|1|2,2
           - Recived Responce: 
           
         D) We tested not recieveing the correct formatting given correct number of bytes: 
         - Host: MOVE|6|X|1,1
           - Recieved Responce: 
         - Host: DRAW|1||S
           - Recieved Responce: 
         - Host MOVE|6|X|[enter a string that would be longer then buffer]
         
Case 2) Invalid Moves 
        A) We tested moves that were outside of the board (the parenthesis were ommited during testing)
           - (9,9)
             - Recieved Message: 
           - (0,0)
              - Recieved Message: 
           - (1.2,3.4)
              - Recieved Message: 
           - (-1,-1)
              - Recieved Message: 
        
        B) We tested if the cell was already occupied
           We ran the following move order: 
           - Host: 1,1
           - Second Player: 1,1 
             - Recieved Message: 
        
